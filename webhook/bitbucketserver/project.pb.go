// Code generated by protoc-gen-go. DO NOT EDIT.
// source: project.proto

package bitbucketserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Project struct {
	Id         int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	IsPersonal bool   `protobuf:"varint,2,opt,name=isPersonal" json:"isPersonal,omitempty"`
	Key        string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Public     bool   `protobuf:"varint,5,opt,name=public" json:"public,omitempty"`
	Type       string `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
}

func (m *Project) Reset()                    { *m = Project{} }
func (m *Project) String() string            { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()               {}
func (*Project) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *Project) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Project) GetIsPersonal() bool {
	if m != nil {
		return m.IsPersonal
	}
	return false
}

func (m *Project) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *Project) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func init() {
	proto.RegisterType((*Project)(nil), "bitbucketserver.Project")
}

func init() { proto.RegisterFile("project.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x28, 0xca, 0xcf,
	0x4a, 0x4d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4f, 0xca, 0x2c, 0x49, 0x2a,
	0x4d, 0xce, 0x4e, 0x2d, 0x29, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0x52, 0xea, 0x66, 0xe4, 0x62, 0x0f,
	0x80, 0x28, 0x11, 0xe2, 0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x62,
	0xca, 0x4c, 0x11, 0x92, 0xe3, 0xe2, 0xca, 0x2c, 0x0e, 0x48, 0x2d, 0x2a, 0xce, 0xcf, 0x4b, 0xcc,
	0x91, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x08, 0x42, 0x12, 0x11, 0x12, 0xe0, 0x62, 0xce, 0x4e, 0xad,
	0x94, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x85, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73,
	0x53, 0x25, 0x58, 0xc0, 0x42, 0x60, 0xb6, 0x90, 0x18, 0x17, 0x5b, 0x41, 0x69, 0x52, 0x4e, 0x66,
	0xb2, 0x04, 0x2b, 0xd8, 0x04, 0x28, 0x0f, 0xa4, 0xb6, 0xa4, 0xb2, 0x20, 0x55, 0x82, 0x0d, 0xa2,
	0x16, 0xc4, 0x4e, 0x62, 0x03, 0xbb, 0xd2, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x14, 0xc1,
	0x3d, 0xb6, 0x00, 0x00, 0x00,
}
